                                            ###### K8s Complete Installations Commands ######
                                            -------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------

Step 1: Disable swap >>>>>>>>>>
-------------------------------

sudo -i

sudo swapoff -a

sudo sed -i '/swap/s/^/#/' /etc/fstab

sudo swapon --show

-------------------------------------

Step 2: Set up hostname >>>>>>>>>>
----------------------------------
 
sudo hostnamectl set-hostname "k8smaster"

exec bash

------------------------------------------

Step 1: Update the /etc/hosts File for Hostname Resolution >>>>>>>>>>
---------------------------------------------------------------------

sudo nano /etc/hosts

cat /etc/hosts -> set 127.0.0.1   k8smaster

ping -c 4 k8smaster

--------------------------------------------

Step 4: Set up the IPV4 bridge on all nodes >>>>>>>>>>
------------------------------------------------------

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay

sudo modprobe br_netfilter


cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo sysctl --system

clear

-------------------------------------------------------

Step 5: Install kubectl >>>>>>>>>>
---------------------------------------------------------------------

1) To install kubectl, go to this url -> https://kubernetes.io/releases/download/

2) Select 'Linux'

3) Select 'Install using native package management'

sudo apt-get update

sudo apt-get install -y apt-transport-https ca-certificates curl gnupg

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update

sudo apt-get install -y kubectl

kubectl version

------------------------------------------------------------------------------------------------------------------------------------------

Step 6: Install kubeadm, kubelet >>>>>>>>>>>>>>>>>
--------------------------------------------------

1) To install kubeadm and kubelet, go to this url -> https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

2) Select 'Installing kubeadm (Kubernetes v1.28)'

sudo apt-get update

sudo apt-get install -y apt-transport-https ca-certificates curl gpg

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update

sudo apt-get install -y kubelet kubeadm

sudo apt-mark hold kubelet kubeadm kubectl

kubectl version
kubelet --version
kubeadm version

----------------------------------------------------------------------------------------------------------------------------------------

Step 7: Install Docker >>>>>>>>>>
---------------------------------

sudo apt install docker.io

sudo apt remove containerd.io  // if you already installed containerd.io please use remove command, if don't have just leave this command.

sudo mkdir /etc/containerd

sudo sh -c "containerd config default > /etc/containerd/config.toml"

sudo sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.toml

sudo systemctl restart containerd.service

sudo systemctl restart kubelet.service

sudo systemctl enable kubelet.service

-----------------------------------------------------------------------------------------------------------------------------

Step 8: Initialize the Kubernetes cluster on the master node >>>>>>>>>>
-----------------------------------------------------------------------

sudo kubeadm config images pull

sudo kubeadm init --pod-network-cidr=10.0.1.152/16 

###### Let's assume if sudo kubeadm init not worked, use below command to reset 

sudo kubeadm reset

##### then execute -> sudo kubeadm init --pod-network-cidr=10.0.1.211/24

-------------------------------------------------------------------------------

<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Result >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.0.1.164:6443 --token vf6ro7.zs7ex49qaof2sydi \
        --discovery-token-ca-cert-hash sha256:369247841ac182580cdf0c78596514dd7f8512e6de5aca27fef7d1d3a0502e60


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

After initialized successfully, take below commands to execute >>>>>>>>>>
-------------------------------------------------------------------------

mkdir -p $HOME/.kube

sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  
sudo chown $(id -u):$(id -g) $HOME/.kube/config

--------------------------------------------------------

Step 8: Configure kubectl and Calico >>>>>>>>>>
-----------------------------------------------

Below here apply falannel.yaml and directly execute the command : kubectl get nodes and follow 9th steps

Flannel -> kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

Calico -> kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml

Calico -> kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

curl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -O

ls -l

sed -i 's/cidr: 10\.0\.1\.150\/24/cidr: 10.0.1.170\/24/g' custom-resources.yaml

Calico = This will set up Calico as your CNI plugin, providing you with robust network policies and scalable performance.

-------------------------------------------------------------------------------------------------------------------------

Step 09: Verify the cluster and test >>>>>>>>>>
-----------------------------------------------

kubectl create -f custom-resources.yaml

kubectl get nodes

The result is :

NAME         STATUS   ROLES           AGE     VERSION
k8s-master   Ready    control-plane   20s   v1.29.3

-------------------------------------------------------------------------------------------------------------------------------------------
